class resizer;
    int originalM;
    int originalN;
    int m;
    int n;
    real resizedImage[][];
    real image[][];
   
    real mScale;
    real nScale;  
   
    function new(input real image[][], input int m, input int n);
        this.originalM = $size(image,1);
        this.originalN = $size(image,2);
        this.m = m;
        this.n = n;

        // Initialize resizedImage array
        this.resizedImage = new[m];
        for (int i = 0; i < m; i++) begin
            this.resizedImage[i] = new[n];
        end
       
        // Initialize image array
        this.image = new[this.originalM];
        for (int i = 0; i < this.originalM; i++) begin
            this.image[i] = new[this.originalN]; // Correctly initialize each row
        end

        // Copy input image to internal image array
        for (int i = 0; i < this.originalM; i = i+1) begin
            for (int j = 0; j < this.originalN; j = j+1) begin
                this.image[i][j] = image[i][j];
            end
        end

        this.mScale = real'(this.originalM) / real'(m); // Use real division for scaling
        this.nScale = real'(this.originalN) / real'(n);
    endfunction

    function void resizeImage();
        int xAxis;
        int yAxis;
        for (int i = 0; i < this.m; i = i+1) begin
            for (int j = 0; j < this.n; j = j+1) begin
                xAxis = int'(i * this.mScale);
                yAxis = int'(j * this.nScale);
                this.resizedImage[i][j] = this.image[xAxis][yAxis];
            end
        end
    endfunction
endclass
module test_resizer;
    integer file;
    resizer myResizer;
    initial begin
        real inputImage[28][28] = '{'{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0039, 0.0118, 0.0000, 0.0000, 0.0157, 0.0078, 0.0000, 0.0431, 0.0000, 0.0000, 0.0549, 0.0039, 0.0000, 0.0745, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0471, 0.0000, 0.0000, 0.0275, 0.0000, 0.0039, 0.0392, 0.0000, 0.0078, 0.0078, 0.0627, 0.0000, 0.0118, 0.0118, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0275, 0.0314, 0.0000, 0.0314, 0.0000, 0.0000, 0.0314, 0.0000, 0.0000, 0.0745, 0.0000, 0.0000, 0.0039, 0.0824, 0.0000, 0.0157, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0039, 0.0000, 0.0000, 0.0039, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0431, 0.0000, 0.0000, 0.0392, 0.0118, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0510, 0.0000, 0.0588, 0.0392, 0.1020, 0.1333, 0.0667, 0.3020, 0.7098, 0.6980, 0.1373, 0.0157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5882, 0.9961, 0.9804, 0.9843, 0.9529, 0.9882, 0.9882, 1.0000, 0.1765, 0.0235, 0.0000, 0.0196, 0.0000, 0.0353, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0275, 0.2824, 0.8039, 1.0000, 0.9333, 0.9529, 1.0000, 0.9961, 0.9843, 0.9725, 0.7882, 0.7765, 0.2235, 0.0000, 0.0745, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.8549, 1.0000, 0.9451, 1.0000, 0.9765, 0.9804, 0.9843, 0.9804, 1.0000, 1.0000, 0.9490, 0.8784, 0.1922, 0.0000, 0.0471, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0039, 0.0078, 0.0118, 0.0078, 0.0078, 0.0039, 0.0000, 0.2549, 0.8941, 1.0000, 0.9961, 0.9569, 0.4667, 0.1333, 0.1608, 0.4314, 0.9804, 1.0000, 0.9725, 0.4863, 0.0784, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0039, 0.0039, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0471, 0.0000, 0.2431, 0.4039, 0.4431, 0.4588, 0.1333, 0.0000, 0.0000, 0.0000, 0.7843, 0.9569, 1.0000, 1.0000, 0.0000, 0.0471, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0078, 0.0039, 0.0000, 0.0000, 0.0000, 0.0000, 0.0039, 0.0078, 0.0000, 0.0000, 0.0078, 0.0157, 0.0000, 0.0431, 0.0000, 0.0275, 0.0235, 0.0000, 0.2941, 0.9569, 1.0000, 1.0000, 0.0157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0039, 0.0078, 0.0118, 0.0157, 0.0157, 0.0000, 0.0549, 0.0000, 0.0000, 0.0000, 0.0353, 0.0000, 0.0078, 0.0000, 0.0000, 0.1333, 1.0000, 1.0000, 0.9922, 0.0392, 0.0392, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0039, 0.0078, 0.0118, 0.0078, 0.0000, 0.0000, 0.0118, 0.0078, 0.0000, 0.0510, 0.0431, 0.0000, 0.0000, 0.0000, 0.0235, 0.0471, 0.3882, 1.0000, 0.9961, 0.9725, 0.0588, 0.0471, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0039, 0.0039, 0.0039, 0.0000, 0.0000, 0.0000, 0.0000, 0.0039, 0.0039, 0.0000, 0.0000, 0.0196, 0.0235, 0.0431, 0.0000, 0.0000, 0.0667, 0.7216, 0.9686, 1.0000, 0.9529, 0.0510, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0118, 0.0078, 0.0000, 0.0000, 0.0000, 0.0000, 0.0078, 0.0157, 0.0157, 0.0000, 0.0431, 0.0000, 0.2000, 0.3686, 0.3333, 0.0196, 0.0196, 0.0980, 0.9647, 0.9647, 1.0000, 0.8157, 0.0000, 0.0353, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0157, 0.0039, 0.0000, 0.0000, 0.0039, 0.0275, 0.0588, 0.0745, 0.3882, 0.4039, 0.7137, 0.7412, 0.9294, 0.9922, 0.9882, 0.7490, 0.7451, 0.8902, 0.9529, 0.9882, 0.8235, 0.0706, 0.0275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0157, 0.0000, 0.0000, 0.1255, 0.4275, 0.7255, 0.9686, 1.0000, 0.9490, 1.0000, 0.9569, 1.0000, 1.0000, 0.9490, 0.9843, 1.0000, 0.9412, 1.0000, 1.0000, 0.8549, 0.4863, 0.0353, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0078, 0.0000, 0.0000, 0.0000, 0.4980, 1.0000, 0.9216, 1.0000, 1.0000, 0.9686, 0.8980, 0.8314, 0.9490, 0.9804, 1.0000, 1.0000, 0.9725, 1.0000, 0.9922, 0.9765, 1.0000, 0.9529, 0.6667, 0.0471, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0431, 0.0000, 0.0353, 0.9922, 1.0000, 1.0000, 0.9137, 0.7922, 0.3333, 0.0000, 0.2078, 0.7686, 0.9333, 1.0000, 0.8902, 0.9333, 0.5569, 0.4275, 0.7569, 1.0000, 0.9412, 1.0000, 0.7059, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0235, 0.0000, 0.0863, 0.0039, 0.9608, 0.9529, 0.9961, 1.0000, 0.8510, 0.9216, 0.8863, 0.8353, 0.9569, 0.9843, 1.0000, 0.9373, 0.3020, 0.0000, 0.0000, 0.0784, 0.7137, 0.9686, 0.9373, 0.9529, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0157, 0.6471, 0.9843, 1.0000, 0.9608, 1.0000, 0.9490, 0.9922, 0.9804, 1.0000, 0.7725, 0.4196, 0.2314, 0.0000, 0.0706, 0.0078, 0.0235, 0.0000, 0.2118, 1.0000, 0.6196, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0941, 0.0000, 0.0000, 0.0235, 0.1333, 0.6549, 0.7608, 0.6902, 0.7176, 0.6431, 0.1725, 0.0078, 0.0392, 0.0235, 0.0235, 0.0000, 0.0000, 0.0196, 0.0000, 0.0039, 0.0000, 0.0549, 0.0078, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0392, 0.0000, 0.0549, 0.0000, 0.0471, 0.0000, 0.0196, 0.0000, 0.0039, 0.0000, 0.0235, 0.0000, 0.0275, 0.0000, 0.0000, 0.0000, 0.0314, 0.0000, 0.0392, 0.0000, 0.0196, 0.0000, 0.0000, 0.0392, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0549, 0.0000, 0.0157, 0.0000, 0.0000, 0.0980, 0.0000, 0.0000, 0.0353, 0.0000, 0.0000, 0.0353, 0.0000, 0.0431, 0.0000, 0.0039, 0.0000, 0.0000, 0.0078, 0.0000, 0.0000, 0.0275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}, '{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000}};
        // Desired output dimensions for resizing
        integer desiredM = 100;
        integer desiredN = 100;

        // Open a file for writing
        file = $fopen("D:\\Projects\\verilogMLP\\temporary\\outputVivadoTest.txt", "w");
        if (file == 0) begin
            $display("Error: Could not open file for writing.");
            $finish;
        end
   
        // Resizer class instance
        myResizer = new(inputImage, desiredM, desiredN); // Fix the instantiation
        
        // Print original image dimensions to file
        $fdisplay(file, "Original Image Dimensions: %0d x %0d", myResizer.originalM, myResizer.originalN);

        // Perform the resizing
        myResizer.resizeImage();

        // Display resized image dimensions to file
        $fdisplay(file, "Resized Image Dimensions: %0d x %0d", myResizer.m, myResizer.n);

        // Write the resized image in Verilog array syntax to file
        $fwrite(file, "Resized Image (Verilog Array Syntax):\n");
        $fwrite(file, "'{");
        for (int i = 0; i < myResizer.m; i = i+1) begin
            $fwrite(file, "'{");
            for (int j = 0; j < myResizer.n; j = j+1) begin
                if (j < myResizer.n - 1)
                    $fwrite(file, "%0.4f, ", myResizer.resizedImage[i][j]);
                else
                    $fwrite(file, "%0.4f", myResizer.resizedImage[i][j]);
            end
            if (i < myResizer.m - 1)
                $fwrite(file, "}, ");
            else
                $fwrite(file, "}");
        end
        $fwrite(file, "};\n"); // Close the Verilog array

        // Close the file
        $fclose(file);

        // Finish the simulation
        $finish;
    end
endmodule
