class DigitExtractor;
    
    // Input 2D real array
    real normalized_array[][];
    
    // Binary array and visited array
    bit binary_array[][];
    bit visited[][];
    real digit_image[][]; 
    // Output variable to store extracted digits
    real digit_images[$][][];
    
    // Constructor: Initializes normalized array and processes it
    function new(input real input_array[][]);
        int m, n;
        this.normalized_array = input_array;
        
        // Get dimensions of the normalized array
        m = $size(input_array, 0);
        n = $size(input_array, 1);
        
        // Initialize binary_array and visited arrays
        binary_array = new[m];    // Allocate rows first
        visited = new[m];         // Allocate rows for visited array
        
        for (int i = 0; i < m; i++) begin
            binary_array[i] = new[n];   // Allocate columns for each row
            visited[i] = new[n];        // Allocate columns for each row in visited array
        end
        
        // Convert normalized array to binary array
        for (int i = 0; i < m; i++) begin
            for (int j = 0; j < n; j++) begin
                binary_array[i][j] = (normalized_array[i][j] > 0.7) ? 0 : 1;
                visited[i][j] = 0;
            end
        end
    endfunction
    
    // Function to extract a digit
    function void extract_digit( input int x, input int y);
        bit found;
        int directions[4][2] = '{ {-1, 0}, {1, 0}, {0, -1}, {0, 1} };

        int queue[$][2];
        int coords[$][2];
        int dx, dy;
        int cx, cy;
        int nx, ny;
        int x_min, y_min, x_max, y_max;

        // Add initial pixel to queue
        queue.push_back({x, y});

        // While queue is not empty
        while (queue.size() > 0) begin
            int temp[2]; 
            
            // Pop the front element from the queue
            temp = queue.pop_front(); 
            
            // Assign the individual elements from temp to cx and cy
            cx = temp[0];
            cy = temp[1];
            
            if (visited[cx][cy])
                continue;
                
            visited[cx][cy] = 1;
            coords.push_back({cx, cy});
            
            // Check neighbors: up, down, left, right
            for (int d = 0; d < 4; d++) begin
                dx = directions[d][0];
                dy = directions[d][1];
                nx = cx + dx;
                ny = cy + dy;
            
                if (nx >= 0 && nx < $size(binary_array, 0) &&
                    ny >= 0 && ny < $size(binary_array, 1) &&
                    binary_array[nx][ny] == 1 && !visited[nx][ny]) begin
                    queue.push_back({nx, ny});
                end
            end
        end

        // Find bounding box
        if (coords.size() > 0) begin
            x_min = coords[0][0];
            y_min = coords[0][1];
            x_max = 0;
            y_max = 0;

            foreach (coords[i]) begin
                x_min = (coords[i][0] < x_min) ? coords[i][0] : x_min;
                y_min = (coords[i][1] < y_min) ? coords[i][1] : y_min;
                x_max = (coords[i][0] > x_max) ? coords[i][0] : x_max;
                y_max = (coords[i][1] > y_max) ? coords[i][1] : y_max;
            end
            
 // Declare a dynamic array (jagged array)

// Allocate rows for the digit image
this.digit_image = new[x_max - x_min + 1];

// Now allocate columns for each row
for (int i = 0; i < x_max - x_min + 1; i++) begin
    this.digit_image[i] = new[y_max - y_min + 1];
end
            

            // Fill the digit image with corresponding values from normalized_array
            for (int i = x_min; i <= x_max; i++) begin
                for (int j = y_min; j <= y_max; j++) begin
                    this.digit_image[i - x_min][j - y_min] = normalized_array[i][j];
                end
            end
            
            // Check if the digit image contains any values less than 0.99
            found = 0;
            for (int i = 0; i < $size(digit_image, 0); i++) begin
                for (int j = 0; j < $size(digit_image, 1); j++) begin
                    if (this.digit_image[i][j] < 0.99) begin
                        found = 1;
                        break;
                    end
                end
                if (found) break;
            end
            
            // Add the digit image to digit_images array if it's valid
            if (found) begin
                digit_images.push_back(digit_image);
            end
        end
    endfunction
    
    // Process the binary array to find and extract digits
    function void process_image();
        for (int i = 0; i < $size(binary_array, 0); i++) begin
            for (int j = 0; j < $size(binary_array, 1); j++) begin
                if (binary_array[i][j] == 1 && !visited[i][j]) begin
                    extract_digit(i, j);
                end
            end
        end
    endfunction
endclass
